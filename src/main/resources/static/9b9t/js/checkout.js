document.addEventListener('DOMContentLoaded', () => {
    const cartItems = JSON.parse(localStorage.getItem('cart')) || [];
    const orderItemsList = document.querySelector('.order-items');
    const minOrderWarning = document.getElementById('min-order-warning');
    const checkoutMain = document.getElementById('checkout-main');
    const payButtons = document.querySelectorAll('.pay-button');
    const contactForm = document.getElementById('contact-form');
    const languageSelect = document.getElementById('language-select');
    const deliverySelect = document.getElementById('delivery-select');
    const deliveryDescription = document.getElementById('delivery-description');
    const coordinatesInput = document.getElementById('coordinates-input');
    const xCoordInput = document.getElementById('x-coord');
    const zCoordInput = document.getElementById('z-coord');
    let activePromo = null;

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º —è–∑—ã–∫–∞
    function getOrderTotalElement(lang) {
        return document.querySelector(`[data-lang="${lang}"] #order-total`);
    }

    function getDeliveryFeeElement(lang) {
        return document.querySelector(`[data-lang="${lang}"] #delivery-fee`);
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –∏–∑ localStorage
    const savedLanguage = localStorage.getItem('selectedLanguage') || 'ru';
    languageSelect.value = savedLanguage;
    changeLanguage(savedLanguage);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    languageSelect.addEventListener('change', (event) => {
        const selectedLang = event.target.value;
        localStorage.setItem('selectedLanguage', selectedLang);
        changeLanguage(selectedLang);
        updateOrderTotal(); // –î–æ–±–∞–≤–ª–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É–º–º—ã –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
    deliverySelect.addEventListener('change', (event) => {
        const selectedMethod = event.target.value;
        updateDeliveryDescription(selectedMethod, languageSelect.value);
        if (selectedMethod === 'specific') {
            coordinatesInput.style.display = 'block';
        } else {
            coordinatesInput.style.display = 'none';
        }
        updateOrderTotal();
    });

    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤–≤–æ–¥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç X –∏ Z
    [xCoordInput, zCoordInput].forEach(input => {
        input.addEventListener('input', (e) => {
            let value = parseInt(e.target.value) || 0;
            if (value > 1000000) value = 1000000;
            if (value < -1000000) value = -1000000;
            e.target.value = value;
            if (deliverySelect.value === 'specific') updateOrderTotal();
        });
    });

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
    function updateDeliveryDescription(method, lang) {
        const descriptions = deliveryDescription.querySelectorAll('p');
        descriptions.forEach(desc => {
            if (desc.getAttribute('data-delivery') === method && desc.getAttribute('data-lang') === lang) {
                desc.style.display = 'block';
            } else {
                desc.style.display = 'none';
            }
        });
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
    function calculateDeliveryFee(x, z) {
        const distance = Math.max(Math.abs(x), Math.abs(z));
        const feePer10000Blocks = 0.1;
        return Math.floor(distance / 10000) * feePer10000Blocks;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º—ã
function updateOrderTotal() {
    const lang = languageSelect.value;
    const orderTotal = getOrderTotalElement(lang);
    const deliveryFeeElement = getDeliveryFeeElement(lang);
    const discountElement = document.querySelector(`[data-lang="${lang}"] #discount-amount`);

    const x = parseInt(xCoordInput.value) || 0;
    const z = parseInt(zCoordInput.value) || 0;
    const deliveryFee = calculateDeliveryFee(x, z);
    let subtotal = cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);

    let discount = 0;
    if (activePromo) {
        if (activePromo.type === 'percentage') {
            discount = subtotal * (activePromo.value / 100);
        } else if (activePromo.type === 'fixed') {
            discount = activePromo.value;
        } else if (activePromo.type === 'free_shipping') {
            deliveryFee = 0;
        }
    }

    const totalPrice = Math.max(0, subtotal - discount) + deliveryFee;

    if (orderTotal) orderTotal.textContent = totalPrice.toFixed(2);
    if (deliveryFeeElement) deliveryFeeElement.textContent = deliveryFee.toFixed(2);
    if (discountElement) discountElement.textContent = discount.toFixed(2);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–º
    document.querySelectorAll(`[data-lang="${lang}"] .discount`).forEach(el => {
        el.style.display = discount > 0 ? 'block' : 'none';
    });
}

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–∞
    function changeLanguage(lang) {
        document.querySelectorAll('[data-lang]').forEach(element => {
            element.style.display = 'none';
        });

        document.querySelectorAll(`[data-lang="${lang}"]`).forEach(element => {
            element.style.display = 'block';
        });

        payButtons.forEach(button => {
            button.style.display = 'none';
        });

        const selectedMethod = deliverySelect.value;
        updateDeliveryDescription(selectedMethod, lang);

        const isFormValid = contactForm.checkValidity();
        if (isFormValid) {
            const activePayButton = document.querySelector(`.pay-button[data-lang="${lang}"]`);
            if (activePayButton) {
                activePayButton.style.display = 'block';
            }
        }
        updateOrderTotal(); // –î–æ–±–∞–≤–ª–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É–º–º—ã –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã
    const total = cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);
    if (total < 2) {
        minOrderWarning.style.display = 'block';
        checkoutMain.style.display = 'none';
        payButtons.forEach(button => button.style.display = 'none');
    } else {
        minOrderWarning.style.display = 'none';
        checkoutMain.style.display = 'flex';
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ
    function renderOrderSummary() {
        orderItemsList.innerHTML = '';
        cartItems.forEach(item => {
            const li = document.createElement('li');
            li.innerHTML = `
                <span>${item.name} - $${item.price} x ${item.quantity}</span>
            `;
            orderItemsList.appendChild(li);
        });
        updateOrderTotal();
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
    contactForm.addEventListener('input', () => {
        const isFormValid = contactForm.checkValidity();
        const currentLanguage = languageSelect.value;

        payButtons.forEach(button => {
            if (button.getAttribute('data-lang') === currentLanguage) {
                button.style.display = isFormValid ? 'block' : 'none';
            } else {
                button.style.display = 'none';
            }
        });
    });

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã X –∏ Z
    function validateCoordinates() {
        const x = xCoordInput.value.trim();
        const z = zCoordInput.value.trim();

        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—è –Ω–µ –ø—É—Å—Ç—ã–µ
        if (x === "" || z === "") {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã X –∏ Z.'); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º alert, –µ—Å–ª–∏ –ø–æ–ª—è –ø—É—Å—Ç—ã–µ
            return false;
        }

        return true;
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
    document.querySelectorAll('#apply-promo-btn').forEach(btn => {
        btn.addEventListener('click', applyPromoCode);
    });

async function applyPromoCode(e) {
    e.preventDefault();
    const promoCode = document.querySelector('.promo-code-input:not([style*="display: none"])').value.trim().toUpperCase();
    const currentLang = languageSelect.value; // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫

    // –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    const messages = {
        enter_promo: {
            ru: '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥',
            uk: '–í–≤–µ–¥—ñ—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥',
            en: 'Enter promo code'
        },
        promo_not_found: {
            ru: '–ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —É–±–µ–∂–∞–ª! üèÉ‚Äç‚ôÇÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∏–ª–∏ –ª–æ–≤–∏—Ç–µ —Å–≤–µ–∂–∏–µ –∫–æ–¥—ã –≤ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ',
            uk: '–°—Ö–æ–∂–µ, —Ü–µ–π –ø—Ä–æ–º–æ–∫–æ–¥ –≤—Ç—ñ–∫! üèÉ‚Äç‚ôÇÔ∏è –í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à–∏–π –∞–±–æ –ª–æ–≤—ñ—Ç—å —Å–≤—ñ–∂—ñ –∫–æ–¥–∏ –≤ –Ω–∞—à—ñ–π –≥—Ä—É–ø—ñ',
            en: 'Oops, this promo code ran away! üèÉ‚Äç‚ôÇÔ∏è Try another one or catch fresh codes in our group'
        },
        promo_no_value: {
            ru: '–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–Ω–∞—á–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏',
            uk: '–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è –∑–Ω–∏–∂–∫–∏',
            en: 'Promo code does not contain discount value'
        },
        promo_inactive: {
            ru: '–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω',
            uk: '–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π',
            en: 'Promo code is inactive'
        },
        promo_limit_reached: {
            ru: '–õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω',
            uk: '–õ—ñ–º—ñ—Ç –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—å –≤–∏—á–µ—Ä–ø–∞–Ω–æ',
            en: 'Usage limit reached'
        },
        promo_min_order: {
            ru: '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {minOrder}$',
            uk: '–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è —Ü—å–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥—É: {minOrder}$',
            en: 'Minimum order amount for this promo code: {minOrder}$'
        },
        promo_applied: {
            ru: '–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω!',
            uk: '–ü—Ä–æ–º–æ–∫–æ–¥ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ!',
            en: 'Promo code applied!'
        },
        promo_check_error: {
            ru: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞',
            uk: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –ø—Ä–æ–º–æ–∫–æ–¥—É',
            en: 'Error checking promo code'
        }
    };

    if (!promoCode) {
        showPromoMessage(messages.enter_promo[currentLang] || messages.enter_promo.ru, 'error');
        return;
    }

    try {
        const response = await fetch(`https://endles.fun/api/9b9t/promocodes/${promoCode}`);

        if (!response.ok) {
            throw new Error(messages.promo_not_found[currentLang] || messages.promo_not_found.ru);
        }

        const promoData = await response.json();
        console.log("Promo data:", promoData);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è free_shipping
        if (promoData.type !== 'free_shipping') {
            if (!promoData.value) {
                throw new Error('–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–Ω–∞—á–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏');
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥–∞
        if (promoData.isActive === false) {
            throw new Error('–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
        if (promoData.maxUses && promoData.usedCount >= promoData.maxUses) {
            throw new Error('–õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
        const totalPrice = cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);
        if (promoData.minOrder && totalPrice < promoData.minOrder) {
            throw new Error(`–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞: ${promoData.minOrder}$`);
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
        activePromo = {
            code: promoCode,
            type: promoData.type,
            value: promoData.value, // –º–æ–∂–µ—Ç –±—ã—Ç—å null –¥–ª—è free_shipping
            minOrder: promoData.minOrder || 0
        };

        showPromoMessage('–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω!', 'success');
        updateOrderTotal();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞:', error);
        showPromoMessage(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞', 'error');
        activePromo = null;
        updateOrderTotal();
    }
}

   function showPromoMessage(message, type = 'info') {
        const promoMessage = document.getElementById('promo-message');
        promoMessage.textContent = message;
        promoMessage.className = `promo-message ${type}`;

        setTimeout(() => {
            promoMessage.textContent = '';
            promoMessage.className = 'promo-message';
        }, 5000);
    }

    payButtons.forEach(button => {
        button.addEventListener('click', async (e) => {
            e.preventDefault();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            if (deliverySelect.value === 'specific' && !validateCoordinates()) {
                alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã X –∏ Z.');
                return;
            }

            if (contactForm.checkValidity()) {
                await sendOrder();
            } else {
                alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!');
            }
        });
    });

    async function sendOrder() {
        const orderId = crypto.randomUUID(); // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è UUID

        const getValue = (id) => {
            const element = document.getElementById(id);
            if (!element) {
                console.error(`–û—à–∏–±–∫–∞: —ç–ª–µ–º–µ–Ω—Ç #${id} –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
                return null;
            }
            return element.value;
        };

        const formattedISO = new Date().toISOString();
        const username = getValue('username');
        const discord = getValue('discord');
        const email = getValue('email');
        const deliveryMethod = deliverySelect.value;

        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã X –∏ Z
        const x = parseInt(getValue('x-coord')) || 0;
        const z = parseInt(getValue('z-coord')) || 0;

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
        const deliveryFee = calculateDeliveryFee(x, z);

        // –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞
        const subtotal = cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        let discount = 0;
        if (activePromo) {
            if (activePromo.type === 'percentage') {
                discount = subtotal * (activePromo.value / 100);
            } else if (activePromo.type === 'fixed') {
                discount = activePromo.value;
            } else if (activePromo.type === 'free_shipping') {
                deliveryFee = 0;
            }
        }

        const finalTotalPrice = Math.max(0, subtotal - discount) + deliveryFee;

        // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        const orderData = {
            orders: {
                [orderId]: {
                    info: { formattedISO, username, discord, email, deliveryMethod },
                    coordinates: { x, z },
                    subtotal,
                    discount,
                    deliveryFee,
                    totalPrice: finalTotalPrice,
                    promoCode: activePromo ? activePromo.code : null,
                    products: cartItems.reduce((acc, product) => {
                        acc[product.id] = product.quantity || 1;
                        return acc;
                    }, {}),
                    messages: {}
                }
            }
        };

        console.log("Sending order data:", JSON.stringify(orderData, null, 2)); // –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ

        try {
            const response = await fetch('https://endles.fun/api/9b9t/orders', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(orderData)
            });

            if (!response.ok) {
                const errorResponse = await response.json();
                console.error("Server error:", errorResponse);
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const responseData = await response.json();
            console.log("Server response:", responseData);

            // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
            localStorage.removeItem('cart');
            localStorage.removeItem('activePromo');

            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–∞—Ç–∞
            window.location.href = "https://endles.fun/9b9t/chat?orderId=" + orderId;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            alert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º.');
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
    function getCartItems() {
        return JSON.parse(localStorage.getItem('cart')) || [];
    }

    renderOrderSummary();
});